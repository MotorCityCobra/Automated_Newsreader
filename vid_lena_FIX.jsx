var vs = "/Users/anthonycelio/Documents/deep_news/NewsFiles/!Lena/000/"var myblocnFolder = new Folder(vs).getFiles()//lena = [1551166794, 1551166813]var count = []for (var i = 0; i < lena.length; i++){    app.project.item(1).duplicate()    count.push(i)}countfunction lena_fun(direct, compz, bloc, type){    p = app.project.item(compz+1)    if (type == 'mp4'){    var wavs = vs+direct+"/"    var mypFolder = new Folder(wavs).getFiles("*.mp4")    p.layers.add(app.project.importFile(new ImportOptions(mypFolder[0])))    h = p.layer(1).height    wid = p.layer(1).width    app.project.items.addComp("zzzzzzzzzzzzzzzzz", wid, h, 1, 5000, 30).openInViewer()    zComp = app.project.item(app.project.items.length)    zComp.layers.add(app.project.importFile(new ImportOptions(mypFolder[0])))    vlen = (zComp.layer(1).outPoint - zComp.layer(1).inPoint)    chain = vlen    mcount = 1    for (var i = 1; chain < 150; i++){        zComp.layer(1).duplicate()        zComp.layer(1).moveAfter(zComp.layer(i+1))        zComp.layer(i+1).startTime = zComp.layer(i).outPoint        chain += vlen        mcount += 1        }    zComp.workAreaStart = zComp.layer(1).inPoint    zComp.workAreaDuration = zComp.layer(mcount).outPoint - zComp.layer(1).inPoint    app.project.renderQueue.items.add(zComp)    tmpc = "/Users/anthonycelio/xx/c/c"    tmpL = "/Users/anthonycelio/xx/c/"+direct+direct    app.project.renderQueue.item(compz).outputModule(1).applyTemplate(tmpc)    app.project.renderQueue.item(compz).outputModule(1).file = new File(tmpL)    app.beginSuppressDialogs()    app.project.renderQueue.render();    app.endSuppressDialogs(false);    zComp.remove()    p.openInViewer()    p.layer(1).remove()    }        p.openInViewer()    zuz = 500 * (Math.random() * (0.9585 - 0.987654) + 0.987654)    p.layer(2).outPoint = zuz    p.layer(3).inPoint = zuz    var myFolder = new File("~/Documents/deep_news/correspondants/lena/lena_w.jpg")    p.layers.add(app.project.importFile(new ImportOptions(myFolder)));    var wavs = vs+direct+"/"    var mywFolder = new Folder(wavs).getFiles("*.wav")    wavdir = 1    for (var i = 0; i < mywFolder.length; i++){        p.layers.add(app.project.importFile(new ImportOptions(mywFolder[i])))        wavdir += p.layer(1).outPoint - p.layer(1).inPoint + 0.35        p.layer(1).moveToEnd()        }    wavdir = p.layer(3).outPoint - wavdir    p.layer(1).scale.setValue([75, 100])    for (var i = 13; i < (mywFolder.length + 13); i++){        L = p.layer(i)        L.startTime = wavdir        wavdir += (L.outPoint - L.inPoint + 0.35)        if (i % 2 != 0){            p.layer(1).opacity.setValueAtTime((p.layer(i).inPoint - 0.01), 0)            p.layer(1).opacity.setValueAtTime((p.layer(i).inPoint), 100)            p.layer(1).opacity.setValueAtTime((p.layer(i).outPoint), 100)            p.layer(1).opacity.setValueAtTime((p.layer(i).outPoint + 0.01), 0)            }        }    if (type == 'jpg'){        var mypFolder = new Folder(wavs).getFiles("*.jpg")        p.layers.add(app.project.importFile(new ImportOptions(mypFolder[0])))        p.layer(1).duplicate()}    if (type == 'mp4'){        var myFolder = new File("/Users/anthonycelio/xx/c/"+direct+direct+".mov")        p.layers.add(app.project.importFile(new ImportOptions(myFolder)))        p.layer(1).duplicate()}            function window(x, z){        var myLayer = p.layer(x);        if (myLayer.width > (myLayer.height * (504/375))){            var sc = 100 * 375 / myLayer.height            myLayer.scale.setValue([sc, sc])            }        if ((myLayer.width < (myLayer.height * (504/375))) || (myLayer.width == (myLayer.height * (504/375)))){            var sc = 100 * 504 / myLayer.width            myLayer.scale.setValue([sc, sc])            }        myLayer.rotation.setValue([2])        myLayer.position.setValue([311, 324.0])        myLayer.moveAfter(p.layer(z))        p.layer(z).trackMatteType = TrackMatteType.ALPHA    }    window(1, 5)    function opac(x, yi, yo, z, inner, outer){        var lar = p.layer(x)        var inner = inner        var outer = outer        lar.opacity.setValueAtTime(inner, 0)        lar.opacity.setValueAtTime(inner + yi, z)        lar.opacity.setValueAtTime(outer - yo, z)        lar.opacity.setValueAtTime(outer, 0)        }    function slide(x, oo, key_it){        var myLayer = p.layer(x)        var key = myLayer.property("ADBE Transform Group").property("ADBE Position")        key.addKey(inner + oo)        key.addKey(outer + oo)        if (myLayer.width > (myLayer.height * (4/3))){            var sc = 100 * 720 / myLayer.height            var mysc = myLayer.scale;            mysc.setValue([sc, sc])            x1 = (720 / myLayer.height) * myLayer.width * 0.5            x2 = 960 - x1            key.setValueAtKey(key_it, [x1, 360])            key.setValueAtKey((key_it+1), [x2, 360])            }        if ((myLayer.width < (myLayer.height * (4/3))) || (myLayer.width == (myLayer.height * (4/3)))){            var sc = 100 * 960 / myLayer.width            var mysc = myLayer.scale;            mysc.setValue([sc, sc])            y1 = (960 / myLayer.width) * myLayer.height * 0.5            y2 = 720 - y1            key.setValueAtKey(key_it, [480, y1])            key.setValueAtKey((key_it+1), [480, y2])            }        }    //LENA Bumper AUDIO    var myFolder = new Folder("~/Documents/deep_news/correspondants/lena/general_bumpers/").getFiles("*.wav")    for(var i = 0; i < (myFolder.length + 1); i++){        p.layers.add(app.project.importFile(new ImportOptions(myFolder[[0, 1, 2, 3, 4, 5, 6, 7, 8, 8][i]])))        }    //Bumper VIDEO: murca[0]; intro[1]; jap_sat[2]; brb[3]; trud_chars[4]    var myFolder = new Folder("~/Documents/deep_news/bumper_video/").getFiles("*.mov")    for(var i = 0; i < 2; i++){        p.layers.add(app.project.importFile(new ImportOptions(myFolder[[1, 3][i]])));    }    silnc = (vlen - 2)    if (vlen >= 10){        silnc = 8        }        //IN    if (bloc == 1){        p.layer(8).startTime = p.layer(27).inPoint + (p.layer(8).inPoint - p.layer(8).outPoint - 0.3) - silnc        p.layer(13).startTime = p.layer(8).outPoint        p.layer(17).startTime = p.layer(8).inPoint        p.layer(10).startTime = p.layer(8).inPoint + (p.layer(10).inPoint - p.layer(10).outPoint - 0.3)        p.layer(12).startTime = p.layer(10).inPoint + (p.layer(12).inPoint - p.layer(12).outPoint - 0.3)        p.layer(2).startTime = p.layer(12).inPoint + (p.layer(2).inPoint - p.layer(2).outPoint)        p.layer(3).startTime = p.layer(2).inPoint        p.layer(7).startTime = p.layer(p.layers.length).outPoint + 0.5        p.workAreaStart = p.layer(2).inPoint        p.workAreaDuration = p.layer(7).outPoint - p.layer(2).inPoint        opac (14, 0.01, 0.01, 100, p.layer(10).inPoint, p.layer(10).outPoint)        }    //MID    if (bloc == 2){        p.layer(7).startTime = p.layer(p.layers.length).outPoint + 0.5        p.layer(13).startTime = p.layer(27).inPoint - silnc        p.layer(17).startTime = p.layer(27).inPoint - silnc        p.workAreaStart = p.layer(27).inPoint - silnc + 0.01        p.workAreaDuration = p.layer(7).outPoint - (p.layer(27).inPoint - silnc)        opac (14, 0.01, 0.01, 100, p.layer(27).inPoint - silnc, p.layer(27).outPoint - silnc)        }    //OUT TO BREAK    if (bloc == 3){        p.layer(13).startTime = p.layer(27).inPoint - silnc        p.layer(17).startTime = p.layer(27).inPoint - silnc        p.layer(6).startTime = p.layer(p.layers.length).outPoint + 0.5        p.layer(11).startTime = p.layer(6).outPoint + 0.3        p.layer(9).startTime = p.layer(11).outPoint + 0.3        p.layer(1).startTime = p.layer(9).outPoint + 0.3        p.layer(9).startTime = p.layer(11).outPoint + 0.3        p.layer(4).startTime = p.layer(1).outPoint + (p.layer(4).inPoint - p.layer(4).outPoint)        p.workAreaStart = p.layer(27).inPoint - silnc + 0.01        p.workAreaDuration = p.layer(1).outPoint - (p.layer(27).inPoint - silnc)        opac (14, 0.01, 0.01, 100, p.layer(11).inPoint, p.layer(11).outPoint)        opac (14, 0.01, 0.01, 100, p.layer(27).inPoint - silnc, p.layer(27).outPoint - silnc)        }    //OUT+END OF EPISODE    if (bloc == 4){        p.layer(13).startTime = p.layer(27).inPoint - silnc        p.layer(17).startTime = p.layer(27).inPoint - silnc        p.layer(6).startTime = p.layer(p.layers.length).outPoint + 0.5        p.layer(11).startTime = p.layer(6).outPoint + 0.3        p.layer(5).startTime = p.layer(11).outPoint + 0.3        p.layer(2).startTime = p.layer(5).outPoint + 0.3        p.layer(4).startTime = p.layer(2).outPoint + (p.layer(4).inPoint - p.layer(4).outPoint)        p.workAreaStart = p.layer(27).inPoint - silnc + 0.01        p.workAreaDuration = p.layer(2).outPoint - (p.layer(27).inPoint - silnc)        p.layer(2).selected = true        //Reversed selected layer (2)        app.executeCommand(2135)        opac (14, 0.01, 0.01, 100, p.layer(11).inPoint, p.layer(11).outPoint)        opac (14, 0.01, 0.01, 100, p.layer(27).inPoint - silnc, p.layer(27).outPoint - silnc)        }    p.layer(27).startTime = p.layer(27).inPoint - silnc    inner = p.layer(27).inPoint    outer = inner + 23    k = 1    for (var oo = 0; oo < 100; oo++){        if (oo == 0){            opac(13, 0, 3, 100, (inner + oo), (outer + oo))            slide(13, oo, k)            k += 2            }         if ((oo > 0) && (oo % 44 == 0)){            opac(13, 3, 3, 100, (inner + oo), (outer + oo))            slide(13, oo, k)            k += 2            }        }    //convert audio to keyframes    app.executeCommand(5026)    var t = 'temp = thisComp.layer(1).effect("Both Channels")("Slider") * 0.33; [position[0], position[1] + temp]'    p.layer(16).position.expression = t    //crop work area    app.executeCommand(2360)    p.layer(14).outPoint = p.layer(p.layers.length-1).inPoint    p.layer (18).startTime = p.layer(14).startTime    p.layer (18).outPoint = p.layer(p.layers.length).outPoint    p.layer(18).opacity.setValue(61)    p.layer(18).enabled = false    p.layer(14).enabled = false    app.project.renderQueue.items.add(p)    tmpc = "/Users/anthonycelio/xx/c/c"    tmpL = "/Users/anthonycelio/xx/c/"+direct    app.project.renderQueue.item(compz).outputModule(1).applyTemplate(tmpc)    app.project.renderQueue.item(compz).setSettings({"Resolution": "Half"})    app.project.renderQueue.item(compz).outputModule(1).file = new File(tmpL)    app.beginSuppressDialogs()    app.project.renderQueue.render();    app.endSuppressDialogs(false);    var myFolder = new File("/Users/anthonycelio/xx/c/"+direct+".mov")    p.layers.add(app.project.importFile(new ImportOptions(myFolder)));    p.layer(1).scale.setValue([200, 200])    p.layer(1).moveAfter(p.layer(19))    p.layer(19).audioEnabled = false    p.layer(14).enabled = true    p.layer(16).enabled = false    p.layer(18).enabled = true    }for (var z = 0; z < lena.length; z++){    if (z == 0){        lena_fun(lena[z], z+1, 1, 'mp4')}    if ((z > 0) && ((z+1) < lena.length)){        lena_fun(lena[z], z+1, 2, 'mp4')}    if (z == lena.length-1){        lena_fun(lena[z], z+1, 3, 'mp4')}    }app.project.items.addComp(" !FINAL", 960, 720, 1, 10000, 25).openInViewer()app.project.item(1).layers.add(app.project.item(3))p = app.project.item(1)for (var i = 1; i < (lena.length); i++){    p.layers.add(app.project.item(i+3))    p.layer(1).moveAfter(p.layer(i+1))    p.layer(i+1).startTime = p.layer(i).outPoint}p.workAreaStart = p.layer(1).inPointp.workAreaDuration = p.layer(p.layers.length).outPoint - p.layer(1).inPoint//crop work areaapp.executeCommand(2360)app.project.renderQueue.items.add(p)tmpo = '/Users/anthonycelio/xx/c/c'app.project.renderQueue.item(p.layers.length+1).outputModule(1).applyTemplate(tmpo)app.project.renderQueue.render()